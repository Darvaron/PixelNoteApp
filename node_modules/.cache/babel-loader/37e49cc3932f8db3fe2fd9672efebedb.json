{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darva\\\\Documents\\\\David\\\\UD\\\\Septimo semestre\\\\FIS\\\\PixeNoteApp\\\\pixelnote\\\\src\\\\editor\\\\editor.js\";\nimport React from 'react';\nimport ReactQuill from 'react-quill';\nimport debounce from '../helpers';\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles'; // Componente editor del aplicativo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditorComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidUpdate = () => {\n      // Cuando se actualiza el componente\n      if (this.props.selectedNote.id !== this.state.id) {\n        // Si seleccionó otra nota\n        this.setState({\n          text: this.props.selectedNote.body,\n          title: this.props.selectedNote.title,\n          id: this.props.selectedNote.id\n        });\n      }\n    };\n\n    this.componentDidMount = () => {\n      // Cuando se monta el componente\n      this.setState({\n        text: this.props.selectedNote.body,\n        title: this.props.selectedNote.title,\n        id: this.props.selectedNote.id\n      });\n    };\n\n    this.modules = {\n      toolbar: [[{\n        header: '1'\n      }, {\n        header: '2'\n      }, {\n        header: [3, 4, 5, 6]\n      }, {\n        font: []\n      }], [{\n        size: []\n      }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n        list: 'ordered'\n      }, {\n        list: 'buller'\n      }], ['link', 'image', 'video'], ['clean'], ['code-block']],\n      handlers: {\n        image: () => {\n          var range = this.quill.getSelection();\n          var value = prompt('please copy paste the image url here.');\n\n          if (value) {\n            this.quill.insertEmbed(range.index, 'image', value);\n          }\n        }\n      }\n    };\n    this.formats = ['header', 'font', 'size', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'link', 'video', 'code-block'];\n\n    this.updateTitle = async val => {\n      await this.setState({\n        title: val\n      });\n      this.update();\n    };\n\n    this.updateBody = async val => {\n      // Función asincrona que actualiza el estado\n      await this.setState({\n        text: val\n      });\n      this.update();\n    };\n\n    this.update = debounce(() => {\n      // Espera a que el usuario pare 1.5 segundos y en dado caso actualza la base de datos\n      this.props.noteUpdate(this.state.id, {\n        title: this.state.title,\n        body: this.state.text\n      });\n    }, 1500);\n    this.state = {\n      text: '',\n      title: '',\n      id: ''\n    };\n  }\n\n  render() {\n    // classes -- estilos\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.editorContainer,\n      children: [/*#__PURE__*/_jsxDEV(BorderColorIcon, {\n        className: classes.editIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: classes.titleInput,\n        placeholder: \"T\\xEDtulo de la nota...\",\n        value: this.state.title ? this.state.title : '',\n        onChange: e => this.updateTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        value: this.state.text // Texto desplegado en el editor\n        ,\n        onChange: this.updateBody,\n        modules: this.modules,\n        formats: this.formats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  } // Modulo de ReactQuill\n\n\n}\n\nexport default withStyles(styles)(EditorComponent); // Exporta el componente con estilos","map":{"version":3,"sources":["C:/Users/darva/Documents/David/UD/Septimo semestre/FIS/PixeNoteApp/pixelnote/src/editor/editor.js"],"names":["React","ReactQuill","debounce","BorderColorIcon","withStyles","styles","EditorComponent","Component","constructor","componentDidUpdate","props","selectedNote","id","state","setState","text","body","title","componentDidMount","modules","toolbar","header","font","size","list","handlers","image","range","quill","getSelection","value","prompt","insertEmbed","index","formats","updateTitle","val","update","updateBody","noteUpdate","render","classes","editorContainer","editIcon","titleInput","e","target"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ReactQuill from 'react-quill'\r\nimport debounce from '../helpers'\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport styles from './styles'\r\n\r\n// Componente editor del aplicativo\r\n\r\nclass EditorComponent extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      text: '',\r\n      title: '',\r\n      id: '',\r\n    }\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    // Cuando se actualiza el componente\r\n    if (this.props.selectedNote.id !== this.state.id) {\r\n      // Si seleccionó otra nota\r\n      this.setState({\r\n        text: this.props.selectedNote.body,\r\n        title: this.props.selectedNote.title,\r\n        id: this.props.selectedNote.id,\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // Cuando se monta el componente\r\n    this.setState({\r\n      text: this.props.selectedNote.body,\r\n      title: this.props.selectedNote.title,\r\n      id: this.props.selectedNote.id,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    // classes -- estilos\r\n    const { classes } = this.props\r\n\r\n    return (\r\n      <div className={classes.editorContainer}>\r\n        <BorderColorIcon className={classes.editIcon}></BorderColorIcon>\r\n        <input\r\n          className={classes.titleInput}\r\n          placeholder=\"Título de la nota...\"\r\n          value={this.state.title ? this.state.title : ''}\r\n          onChange={(e) => this.updateTitle(e.target.value)}\r\n        ></input>\r\n        {/*value -- texto al cargar el editor\r\n          onChange -- acción a realizar cuando se actualiza el editor\r\n        */}\r\n        <ReactQuill\r\n          value={this.state.text} // Texto desplegado en el editor\r\n          onChange={this.updateBody}\r\n          modules={this.modules}\r\n          formats={this.formats}\r\n        ></ReactQuill>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Modulo de ReactQuill\r\n  modules = {\r\n    toolbar: [\r\n      [\r\n        { header: '1' },\r\n        { header: '2' },\r\n        { header: [3, 4, 5, 6] },\r\n        { font: [] },\r\n      ],\r\n      [{ size: [] }],\r\n      ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n      [{ list: 'ordered' }, { list: 'buller' }],\r\n      ['link', 'image', 'video'],\r\n      ['clean'],\r\n      ['code-block'],\r\n    ],\r\n    handlers:{\r\n      image: () => {\r\n        var range = this.quill.getSelection();\r\n        var value = prompt('please copy paste the image url here.');\r\n        if(value){\r\n            this.quill.insertEmbed(range.index, 'image', value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  formats = [\r\n    'header',\r\n    'font',\r\n    'size',\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'blockquote',\r\n    'list',\r\n    'bullet',\r\n    'link',\r\n    'video',\r\n    'code-block',\r\n  ]\r\n  // Actualiza el título\r\n  updateTitle = async (val) => {\r\n    await this.setState({ title: val })\r\n    this.update()\r\n  }\r\n\r\n  updateBody = async (val) => {\r\n    // Función asincrona que actualiza el estado\r\n    await this.setState({ text: val })\r\n    this.update()\r\n  }\r\n\r\n  update = debounce(() => {\r\n    // Espera a que el usuario pare 1.5 segundos y en dado caso actualza la base de datos\r\n    this.props.noteUpdate(this.state.id, {\r\n      title: this.state.title,\r\n      body: this.state.text,\r\n    })\r\n  }, 1500)\r\n}\r\n\r\nexport default withStyles(styles)(EditorComponent) // Exporta el componente con estilos\r\n"]},"metadata":{},"sourceType":"module"}