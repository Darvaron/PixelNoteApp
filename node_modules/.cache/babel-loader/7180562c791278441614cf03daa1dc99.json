{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darva\\\\Documents\\\\David\\\\UD\\\\Septimo semestre\\\\FIS\\\\PixeNoteApp\\\\pixelnote\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport SidebarComponent from './sidebar/sidebar';\nimport EditorComponent from './editor/editor'; // Clase principal de React\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.deleteNote = note => {\n      const noteIndex = this.state.notes.indexOf(note);\n\n      if (this.state.selectedNoteIndex === noteIndex) {\n        // Si esta en la nota que quiere eliminar\n        this.setState({\n          selectedNoteIndex: null,\n          // Deselecciona la nota actual\n          selectedNote: null\n        });\n      } else {\n        // Si no esta en la nota que quiere eliminar\n        this.state.notes.length > 1 // Si tiene más de una nota\n        ? this.selectNote(this.state.notes[this.state.selectedNoteIndex - 1], this.state.selectedNoteIndex - 1) // Cuando se elimina\n        : // Si no\n        this.setState({\n          selectedNoteIndex: null,\n          // Deselecciona la nota actual\n          selectedNote: null\n        });\n      } // Elimina de la base de datos\n\n\n      firebase.firestore().collection('notes').doc(note.id).delete();\n    };\n\n    this.newNote = async title => {\n      const note = {\n        title: title,\n        body: ''\n      };\n      const newFromDB = await firebase.firestore().collection('notes').add({\n        // Crea un nuevo registro en la base de datos\n        title: note.title,\n        body: note.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp() // Fecha de creación\n\n      });\n      const newID = newFromDB.id;\n      await this.setState({\n        notes: [...this.state.notes, note]\n      }); // Actualiza el estado con las notas que ya existen más la nueva nota\n\n      const newNoteIndex = this.state.notes.indexOf(this.state.notes.filter(_note => _note.id === newID)[0]); // Obtiene el nuevo index\n\n      this.setState({\n        selectedNote: this.state.notes[newNoteIndex],\n        selectedNoteIndex: newNoteIndex\n      }); // Selecciona el nuevo index\n    };\n\n    this.noteUpdate = (id, note) => {\n      firebase.firestore().collection('notes').doc(id).update({\n        title: note.title,\n        body: note.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp() // Última vez editado\n\n      });\n    };\n\n    this.selectNote = (n, i) => {\n      this.setState({\n        selectedNoteIndex: i,\n        selectedNote: n\n      });\n    };\n\n    this.componentDidMount = () => {\n      firebase.firestore().collection('notes') // Obtiene lo que encuentre en notes\n      .onSnapshot(serverUpdate => {\n        // Cada vez que se actualice la base de datos\n        const notes = serverUpdate.docs.map(_doc => {\n          // Mapeado\n          const data = _doc.data();\n\n          data['id'] = _doc.id;\n          return data;\n        }); //console.log(notes)\n\n        this.setState({\n          notes: notes\n        });\n      });\n    };\n\n    this.state = {\n      // Variables de estado\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null\n    };\n  }\n\n  render() {\n    // Página principal de la aplicación\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(SidebarComponent, {\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        deleteNote: this.deleteNote,\n        selectNote: this.selectNote,\n        newNote: this.newNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), this.state.selectedNote ?\n      /*#__PURE__*/\n      // Si ha seleccionado una nota\n      _jsxDEV(EditorComponent, {\n        selectedNote: this.state.selectedNote,\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        noteUpdate: this.noteUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : // Si no ha seleccionada nada no despliega el editor\n      null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  } // Elimina la nota\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/darva/Documents/David/UD/Septimo semestre/FIS/PixeNoteApp/pixelnote/src/App.js"],"names":["React","firebase","SidebarComponent","EditorComponent","App","Component","constructor","deleteNote","note","noteIndex","state","notes","indexOf","selectedNoteIndex","setState","selectedNote","length","selectNote","firestore","collection","doc","id","delete","newNote","title","body","newFromDB","add","timestamp","FieldValue","serverTimestamp","newID","newNoteIndex","filter","_note","noteUpdate","update","n","i","componentDidMount","onSnapshot","serverUpdate","docs","map","_doc","data","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AAEA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,eAAP,MAA4B,iBAA5B,C,CAEA;;;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAmCdC,UAnCc,GAmCAC,IAAD,IAAU;AACrB,YAAMC,SAAS,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,CAAyBJ,IAAzB,CAAlB;;AACA,UAAI,KAAKE,KAAL,CAAWG,iBAAX,KAAiCJ,SAArC,EAAgD;AAC9C;AACA,aAAKK,QAAL,CAAc;AACZD,UAAAA,iBAAiB,EAAE,IADP;AACa;AACzBE,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID,OAND,MAMO;AACL;AACA,aAAKL,KAAL,CAAWC,KAAX,CAAiBK,MAAjB,GAA0B,CAA1B,CAA4B;AAA5B,UACI,KAAKC,UAAL,CACE,KAAKP,KAAL,CAAWC,KAAX,CAAiB,KAAKD,KAAL,CAAWG,iBAAX,GAA+B,CAAhD,CADF,EAEE,KAAKH,KAAL,CAAWG,iBAAX,GAA+B,CAFjC,CADJ,CAIM;AAJN,UAKI;AACA,aAAKC,QAAL,CAAc;AACZD,UAAAA,iBAAiB,EAAE,IADP;AACa;AACzBE,UAAAA,YAAY,EAAE;AAFF,SAAd,CANJ;AAUD,OApBoB,CAsBrB;;;AACAd,MAAAA,QAAQ,CACPiB,SADD,GAECC,UAFD,CAEY,OAFZ,EAGCC,GAHD,CAGKZ,IAAI,CAACa,EAHV,EAICC,MAJD;AAKD,KA/Da;;AAAA,SAkEdC,OAlEc,GAkEJ,MAAOC,KAAP,IAAiB;AACzB,YAAMhB,IAAI,GAAG;AACXgB,QAAAA,KAAK,EAAEA,KADI;AAEXC,QAAAA,IAAI,EAAE;AAFK,OAAb;AAIA,YAAMC,SAAS,GAAG,MAAMzB,QAAQ,CAACiB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCQ,GAAzC,CAA6C;AACnE;AACAH,QAAAA,KAAK,EAAEhB,IAAI,CAACgB,KAFuD;AAGnEC,QAAAA,IAAI,EAAEjB,IAAI,CAACiB,IAHwD;AAInEG,QAAAA,SAAS,EAAE3B,QAAQ,CAACiB,SAAT,CAAmBW,UAAnB,CAA8BC,eAA9B,EAJwD,CAIP;;AAJO,OAA7C,CAAxB;AAMA,YAAMC,KAAK,GAAGL,SAAS,CAACL,EAAxB;AACA,YAAM,KAAKP,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EAAsBH,IAAtB;AAAT,OAAd,CAAN,CAZyB,CAYmC;;AAC5D,YAAMwB,YAAY,GAAG,KAAKtB,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,CACnB,KAAKF,KAAL,CAAWC,KAAX,CAAiBsB,MAAjB,CAAyBC,KAAD,IAAWA,KAAK,CAACb,EAAN,KAAaU,KAAhD,EAAuD,CAAvD,CADmB,CAArB,CAbyB,CAevB;;AACF,WAAKjB,QAAL,CAAc;AACZC,QAAAA,YAAY,EAAE,KAAKL,KAAL,CAAWC,KAAX,CAAiBqB,YAAjB,CADF;AAEZnB,QAAAA,iBAAiB,EAAEmB;AAFP,OAAd,EAhByB,CAmBtB;AACJ,KAtFa;;AAAA,SAyFdG,UAzFc,GAyFD,CAACd,EAAD,EAAKb,IAAL,KAAc;AACzBP,MAAAA,QAAQ,CAACiB,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CC,EAA7C,EAAiDe,MAAjD,CAAwD;AACtDZ,QAAAA,KAAK,EAAEhB,IAAI,CAACgB,KAD0C;AAEtDC,QAAAA,IAAI,EAAEjB,IAAI,CAACiB,IAF2C;AAGtDG,QAAAA,SAAS,EAAE3B,QAAQ,CAACiB,SAAT,CAAmBW,UAAnB,CAA8BC,eAA9B,EAH2C,CAGM;;AAHN,OAAxD;AAKD,KA/Fa;;AAAA,SAkGdb,UAlGc,GAkGD,CAACoB,CAAD,EAAIC,CAAJ,KAAU;AACrB,WAAKxB,QAAL,CAAc;AACZD,QAAAA,iBAAiB,EAAEyB,CADP;AAEZvB,QAAAA,YAAY,EAAEsB;AAFF,OAAd;AAID,KAvGa;;AAAA,SA0GdE,iBA1Gc,GA0GM,MAAM;AACxBtC,MAAAA,QAAQ,CACLiB,SADH,GAEGC,UAFH,CAEc,OAFd,EAEuB;AAFvB,OAGGqB,UAHH,CAGeC,YAAD,IAAkB;AAC5B;AACA,cAAM9B,KAAK,GAAG8B,YAAY,CAACC,IAAb,CAAkBC,GAAlB,CAAuBC,IAAD,IAAU;AAC5C;AACA,gBAAMC,IAAI,GAAGD,IAAI,CAACC,IAAL,EAAb;;AACAA,UAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaD,IAAI,CAACvB,EAAlB;AACA,iBAAOwB,IAAP;AACD,SALa,CAAd,CAF4B,CAQ5B;;AACA,aAAK/B,QAAL,CAAc;AAAEH,UAAAA,KAAK,EAAEA;AAAT,SAAd;AACD,OAbH;AAcD,KAzHa;;AAEZ,SAAKD,KAAL,GAAa;AACX;AACAG,MAAAA,iBAAiB,EAAE,IAFR;AAGXE,MAAAA,YAAY,EAAE,IAHH;AAIXJ,MAAAA,KAAK,EAAE;AAJI,KAAb;AAMD;;AAEDmC,EAAAA,MAAM,GAAG;AACP;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE,QAAC,gBAAD;AACE,QAAA,iBAAiB,EAAE,KAAKpC,KAAL,CAAWG,iBADhC;AAEE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAFpB;AAGE,QAAA,UAAU,EAAE,KAAKJ,UAHnB;AAIE,QAAA,UAAU,EAAE,KAAKU,UAJnB;AAKE,QAAA,OAAO,EAAE,KAAKM;AALhB;AAAA;AAAA;AAAA;AAAA,cADF,EAQG,KAAKb,KAAL,CAAWK,YAAX;AAAA;AAA4B;AAC3B,cAAC,eAAD;AACE,QAAA,YAAY,EAAE,KAAKL,KAAL,CAAWK,YAD3B;AAEE,QAAA,iBAAiB,EAAE,KAAKL,KAAL,CAAWG,iBAFhC;AAGE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAHpB;AAIE,QAAA,UAAU,EAAE,KAAKwB;AAJnB;AAAA;AAAA;AAAA;AAAA,cADD,GAOG;AACJ,UAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD,GAjC+B,CAmChC;;;AAnCgC;;AA6HlC,eAAe/B,GAAf","sourcesContent":["import React from 'react'\nimport './App.css'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nimport SidebarComponent from './sidebar/sidebar'\nimport EditorComponent from './editor/editor'\n\n// Clase principal de React\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      // Variables de estado\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null,\n    }\n  }\n\n  render() {\n    // Página principal de la aplicación\n    return (\n      <div className=\"app-container\">\n        <SidebarComponent\n          selectedNoteIndex={this.state.selectedNoteIndex}\n          notes={this.state.notes}\n          deleteNote={this.deleteNote}\n          selectNote={this.selectNote}\n          newNote={this.newNote}\n        ></SidebarComponent>\n        {this.state.selectedNote ? ( // Si ha seleccionado una nota\n          <EditorComponent\n            selectedNote={this.state.selectedNote}\n            selectedNoteIndex={this.state.selectedNoteIndex}\n            notes={this.state.notes}\n            noteUpdate={this.noteUpdate}\n          ></EditorComponent>\n        ) : // Si no ha seleccionada nada no despliega el editor\n        null}\n      </div>\n    )\n  }\n\n  // Elimina la nota\n  deleteNote = (note) => {\n    const noteIndex = this.state.notes.indexOf(note)\n    if (this.state.selectedNoteIndex === noteIndex) {\n      // Si esta en la nota que quiere eliminar\n      this.setState({\n        selectedNoteIndex: null, // Deselecciona la nota actual\n        selectedNote: null,\n      })\n    } else {\n      // Si no esta en la nota que quiere eliminar\n      this.state.notes.length > 1 // Si tiene más de una nota\n        ? this.selectNote(\n            this.state.notes[this.state.selectedNoteIndex - 1],\n            this.state.selectedNoteIndex - 1,\n          ) // Cuando se elimina\n        : // Si no\n          this.setState({\n            selectedNoteIndex: null, // Deselecciona la nota actual\n            selectedNote: null,\n          })\n    }\n\n    // Elimina de la base de datos\n    firebase\n    .firestore()\n    .collection('notes')\n    .doc(note.id)\n    .delete()\n  }\n\n  // Nueva nota\n  newNote = async (title) => {\n    const note = {\n      title: title,\n      body: '',\n    }\n    const newFromDB = await firebase.firestore().collection('notes').add({\n      // Crea un nuevo registro en la base de datos\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(), // Fecha de creación\n    })\n    const newID = newFromDB.id\n    await this.setState({ notes: [...this.state.notes, note] }) // Actualiza el estado con las notas que ya existen más la nueva nota\n    const newNoteIndex = this.state.notes.indexOf(\n      this.state.notes.filter((_note) => _note.id === newID)[0],\n    ) // Obtiene el nuevo index\n    this.setState({\n      selectedNote: this.state.notes[newNoteIndex],\n      selectedNoteIndex: newNoteIndex,\n    }) // Selecciona el nuevo index\n  }\n\n  // Actualiza en la base de datos\n  noteUpdate = (id, note) => {\n    firebase.firestore().collection('notes').doc(id).update({\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(), // Última vez editado\n    })\n  }\n\n  // Selecciona la nota\n  selectNote = (n, i) => {\n    this.setState({\n      selectedNoteIndex: i,\n      selectedNote: n,\n    })\n  }\n\n  // Cuando el cargue satisfactoriamente se llama automaticamente\n  componentDidMount = () => {\n    firebase\n      .firestore()\n      .collection('notes') // Obtiene lo que encuentre en notes\n      .onSnapshot((serverUpdate) => {\n        // Cada vez que se actualice la base de datos\n        const notes = serverUpdate.docs.map((_doc) => {\n          // Mapeado\n          const data = _doc.data()\n          data['id'] = _doc.id\n          return data\n        })\n        //console.log(notes)\n        this.setState({ notes: notes })\n      })\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}