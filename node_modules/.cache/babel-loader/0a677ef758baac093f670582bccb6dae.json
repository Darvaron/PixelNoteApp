{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darva\\\\Documents\\\\David\\\\UD\\\\Septimo semestre\\\\FIS\\\\PixeNoteApp\\\\pixelnote\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport SidebarComponent from './sidebar/sidebar';\nimport EditorComponent from './editor/editor';\nimport CanvasComponent from './canvas/canvas'; // Clase principal de React\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.deleteNote = async note => {\n      const noteIndex = this.state.notes.indexOf(note);\n      await this.setState({\n        notes: this.state.notes.filter(_note => _note !== note)\n      });\n\n      if (this.state.selectedNoteIndex === noteIndex) {\n        // Si esta en la nota que quiere eliminar\n        this.setState({\n          selectedNoteIndex: null,\n          // Deselecciona la nota actual\n          selectedNote: null\n        });\n      } else {\n        // Si no esta en la nota que quiere eliminar\n        if (this.state.notes.length >= 1) {\n          // Si tiene una o más notas\n          this.state.selectedNoteIndex < noteIndex // Esta en una nota de indice menor al que se eliminó\n          ? this.selectNote( // Sigue en la misma nota\n          this.state.notes[this.state.selectedNoteIndex], this.state.selectedNoteIndex) // Si esta en una nota de indice mayor a la eliminada\n          : this.selectNote(this.state.notes[this.state.selectedNoteIndex - 1], this.state.selectedNoteIndex - 1);\n        } else {\n          // Si no tiene una o más de una nota\n          this.setState({\n            selectedNoteIndex: null,\n            // Deselecciona la nota actual\n            selectedNote: null\n          });\n        }\n      } // Elimina de la base de datos\n\n\n      firebase.firestore().collection('notes').doc(note.id).delete();\n    };\n\n    this.newNote = async title => {\n      const note = {\n        title: title,\n        body: ''\n      };\n      const newFromDB = await firebase.firestore().collection('notes').add({\n        // Crea un nuevo registro en la base de datos\n        title: note.title,\n        body: note.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp() // Fecha de creación\n\n      });\n      const newID = newFromDB.id;\n      await this.setState({\n        notes: [...this.state.notes, note]\n      }); // Actualiza el estado con las notas que ya existen más la nueva nota\n\n      const newNoteIndex = this.state.notes.indexOf(this.state.notes.filter(_note => _note.id === newID)[0]); // Obtiene el nuevo index\n\n      this.setState({\n        selectedNote: this.state.notes[newNoteIndex],\n        selectedNoteIndex: newNoteIndex\n      }); // Selecciona el nuevo index\n    };\n\n    this.noteUpdate = (id, note) => {\n      firebase.firestore().collection('notes').doc(id).update({\n        title: note.title,\n        body: note.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp() // Última vez editado\n\n      });\n    };\n\n    this.selectNote = (n, i) => {\n      this.setState({\n        selectedNoteIndex: i,\n        selectedNote: n\n      });\n    };\n\n    this.componentDidMount = () => {\n      firebase.firestore().collection('notes') // Obtiene lo que encuentre en notes\n      .onSnapshot(serverUpdate => {\n        // Cada vez que se actualice la base de datos\n        const notes = serverUpdate.docs.map(_doc => {\n          // Mapeado\n          const data = _doc.data();\n\n          data['id'] = _doc.id;\n          return data;\n        }); //console.log(notes)\n\n        this.setState({\n          notes: notes\n        });\n      });\n    };\n\n    this.state = {\n      // Variables de estado\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null\n    };\n  }\n\n  render() {\n    // Página principal de la aplicación\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(SidebarComponent, {\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        deleteNote: this.deleteNote,\n        selectNote: this.selectNote,\n        newNote: this.newNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), this.state.selectedNote ?\n      /*#__PURE__*/\n      // Si ha seleccionado una nota\n      _jsxDEV(EditorComponent, {\n        selectedNote: this.state.selectedNote,\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        noteUpdate: this.noteUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this) : // Si no ha seleccionada nada no despliega el editor\n      null, this.state.selectedNote ?\n      /*#__PURE__*/\n      // Si ha seleccionado una nota\n      _jsxDEV(CanvasComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  } // Elimina la nota\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/darva/Documents/David/UD/Septimo semestre/FIS/PixeNoteApp/pixelnote/src/App.js"],"names":["React","firebase","SidebarComponent","EditorComponent","CanvasComponent","App","Component","constructor","deleteNote","note","noteIndex","state","notes","indexOf","setState","filter","_note","selectedNoteIndex","selectedNote","length","selectNote","firestore","collection","doc","id","delete","newNote","title","body","newFromDB","add","timestamp","FieldValue","serverTimestamp","newID","newNoteIndex","noteUpdate","update","n","i","componentDidMount","onSnapshot","serverUpdate","docs","map","_doc","data","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nimport SidebarComponent from './sidebar/sidebar'\nimport EditorComponent from './editor/editor'\nimport CanvasComponent from './canvas/canvas'\n\n// Clase principal de React\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      // Variables de estado\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null,\n    }\n  }\n\n  render() {\n    // Página principal de la aplicación\n    return (\n      <div className=\"app-container\">\n        <SidebarComponent\n          selectedNoteIndex={this.state.selectedNoteIndex}\n          notes={this.state.notes}\n          deleteNote={this.deleteNote}\n          selectNote={this.selectNote}\n          newNote={this.newNote}\n        ></SidebarComponent>\n        {this.state.selectedNote ? ( // Si ha seleccionado una nota\n          <EditorComponent\n            selectedNote={this.state.selectedNote}\n            selectedNoteIndex={this.state.selectedNoteIndex}\n            notes={this.state.notes}\n            noteUpdate={this.noteUpdate}\n          ></EditorComponent>\n        ) : // Si no ha seleccionada nada no despliega el editor\n        null}\n        {this.state.selectedNote ? ( // Si ha seleccionado una nota\n          <CanvasComponent></CanvasComponent>\n        ) : null}\n      </div>\n    )\n  }\n\n  // Elimina la nota\n  deleteNote = async (note) => {\n    const noteIndex = this.state.notes.indexOf(note)\n    await this.setState({\n      notes: this.state.notes.filter((_note) => _note !== note),\n    })\n    if (this.state.selectedNoteIndex === noteIndex) {\n      // Si esta en la nota que quiere eliminar\n      this.setState({\n        selectedNoteIndex: null, // Deselecciona la nota actual\n        selectedNote: null,\n      })\n    } else {\n      // Si no esta en la nota que quiere eliminar\n      if (this.state.notes.length >= 1) {\n        // Si tiene una o más notas\n        this.state.selectedNoteIndex < noteIndex // Esta en una nota de indice menor al que se eliminó\n          ? this.selectNote(\n              // Sigue en la misma nota\n              this.state.notes[this.state.selectedNoteIndex],\n              this.state.selectedNoteIndex,\n            ) // Si esta en una nota de indice mayor a la eliminada\n          : this.selectNote(\n              this.state.notes[this.state.selectedNoteIndex - 1],\n              this.state.selectedNoteIndex - 1,\n            )\n      } else {\n        // Si no tiene una o más de una nota\n        this.setState({\n          selectedNoteIndex: null, // Deselecciona la nota actual\n          selectedNote: null,\n        })\n      }\n    }\n\n    // Elimina de la base de datos\n    firebase.firestore().collection('notes').doc(note.id).delete()\n  }\n\n  // Nueva nota\n  newNote = async (title) => {\n    const note = {\n      title: title,\n      body: '',\n    }\n    const newFromDB = await firebase.firestore().collection('notes').add({\n      // Crea un nuevo registro en la base de datos\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(), // Fecha de creación\n    })\n    const newID = newFromDB.id\n    await this.setState({ notes: [...this.state.notes, note] }) // Actualiza el estado con las notas que ya existen más la nueva nota\n    const newNoteIndex = this.state.notes.indexOf(\n      this.state.notes.filter((_note) => _note.id === newID)[0],\n    ) // Obtiene el nuevo index\n    this.setState({\n      selectedNote: this.state.notes[newNoteIndex],\n      selectedNoteIndex: newNoteIndex,\n    }) // Selecciona el nuevo index\n  }\n\n  // Actualiza en la base de datos\n  noteUpdate = (id, note) => {\n    firebase.firestore().collection('notes').doc(id).update({\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(), // Última vez editado\n    })\n  }\n\n  // Selecciona la nota\n  selectNote = (n, i) => {\n    this.setState({\n      selectedNoteIndex: i,\n      selectedNote: n,\n    })\n  }\n\n  // Cuando el cargue satisfactoriamente se llama automaticamente\n  componentDidMount = () => {\n    firebase\n      .firestore()\n      .collection('notes') // Obtiene lo que encuentre en notes\n      .onSnapshot((serverUpdate) => {\n        // Cada vez que se actualice la base de datos\n        const notes = serverUpdate.docs.map((_doc) => {\n          // Mapeado\n          const data = _doc.data()\n          data['id'] = _doc.id\n          return data\n        })\n        //console.log(notes)\n        this.setState({ notes: notes })\n      })\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}