{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darva\\\\Documents\\\\David\\\\UD\\\\Septimo semestre\\\\FIS\\\\PixeNoteApp\\\\pixelnote\\\\src\\\\canvas\\\\canvas.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport './styles.css'; // Componente para dibujar\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CanvasComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.draw = ({\n      nativeEvent\n    }) => {\n      // Dibuja\n      if (isDrawing) {\n        const {\n          offsetX,\n          offsetY\n        } = nativeEvent; // Obtiene la posición\n\n        contextRef.current.lineTo(offsetX, offsetY); // Dibuja\n\n        contextRef.current.stroke();\n      }\n    };\n\n    this.endDrawing = () => {\n      // Termina de dibujar\n      setIsDrawing(false);\n      contextRef.current.closePath();\n    };\n\n    this.starDrawing = ({\n      nativeEvent\n    }) => {\n      // Inicia el dibujo\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent; // Obtiene la posición\n\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(offsetX, offsetY);\n      setIsDrawing(true);\n    };\n  }\n\n  render() {\n    // Renderiza el modulo\n    return (\n      /*#__PURE__*/\n\n      /*useEffect(() => {\r\n          const canvas = canvasRef.current\r\n          // Redefiniendo densidad de pixeles\r\n          canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n          canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n          canvas.style.width = `${window.innerWidth}px`\r\n          canvas.style.height = `${window.innerHeight}px`\r\n      \r\n          // Contexto donde se dibuja\r\n          const context = canvas.getContext('2d')\r\n          context.scale(2, 2) // Para soportar la densidad de pixeles\r\n          context.lineCap = 'round' // Para el final del trazo\r\n          context.strokeStyle = 'black' // Estilo\r\n          context.lineWitdh = 5 // Ancho de la linea\r\n          contextRef.current = context\r\n        }, [])*/\n      _jsxDEV(\"div\", {\n        class: \"layout\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          onMouseDown: this.starDrawing,\n          onMouseUp: this.endDrawing,\n          onMouseMove: this.draw,\n          ref: this.canvasRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    );\n  }\n\n}\n/*\r\nfunction Canvas() {\r\n  // Referencia al canvas actual\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  // Para determinar si se encuentra dibujando\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    // Redefiniendo densidad de pixeles\r\n    canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n    canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n    canvas.style.width = `${window.innerWidth}px`\r\n    canvas.style.height = `${window.innerHeight}px`\r\n\r\n    // Contexto donde se dibuja\r\n    const context = canvas.getContext('2d')\r\n    context.scale(2, 2) // Para soportar la densidad de pixeles\r\n    context.lineCap = 'round' // Para el final del trazo\r\n    context.strokeStyle = 'black' // Estilo\r\n    context.lineWitdh = 5 // Ancho de la linea\r\n    contextRef.current = context\r\n  }, [])\r\n\r\n  const draw = ({nativeEvent}) => { // Dibuja\r\n    if(isDrawing){\r\n        const {offsetX, offsetY} = nativeEvent // Obtiene la posición\r\n        contextRef.current.lineTo(offsetX, offsetY) // Dibuja\r\n        contextRef.current.stroke()\r\n    }\r\n  }\r\n\r\n  const endDrawing = () => { // Termina de dibujar\r\n    setIsDrawing(false)\r\n    contextRef.current.closePath()\r\n  }\r\n\r\n  const starDrawing = ({nativeEvent}) => { // Inicia el dibujo\r\n    const {offsetX, offsetY} = nativeEvent // Obtiene la posición\r\n    contextRef.current.beginPath()\r\n    contextRef.current.moveTo(offsetX, offsetY)\r\n    setIsDrawing(true)\r\n  }\r\n\r\n  return (\r\n    <div class=\"layout\">\r\n      <canvas\r\n        onMouseDown={starDrawing}\r\n        onMouseUp={endDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n*/\n\n\nexport default Canvas; // Exporta el componente con estilos","map":{"version":3,"sources":["C:/Users/darva/Documents/David/UD/Septimo semestre/FIS/PixeNoteApp/pixelnote/src/canvas/canvas.js"],"names":["React","useEffect","useState","useRef","CanvasComponent","Component","draw","nativeEvent","isDrawing","offsetX","offsetY","contextRef","current","lineTo","stroke","endDrawing","setIsDrawing","closePath","starDrawing","beginPath","moveTo","render","canvasRef","Canvas"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,cAAP,C,CAEA;;;;AAEA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAkC5CC,IAlC4C,GAkCrC,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAmB;AAAE;AAC1B,UAAGC,SAAH,EAAa;AACT,cAAM;AAACC,UAAAA,OAAD;AAAUC,UAAAA;AAAV,YAAqBH,WAA3B,CADS,CAC8B;;AACvCI,QAAAA,UAAU,CAACC,OAAX,CAAmBC,MAAnB,CAA0BJ,OAA1B,EAAmCC,OAAnC,EAFS,CAEmC;;AAC5CC,QAAAA,UAAU,CAACC,OAAX,CAAmBE,MAAnB;AACH;AACF,KAxC2C;;AAAA,SA0C5CC,UA1C4C,GA0C/B,MAAM;AAAE;AACnBC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAL,MAAAA,UAAU,CAACC,OAAX,CAAmBK,SAAnB;AACD,KA7C2C;;AAAA,SA+C5CC,WA/C4C,GA+C9B,CAAC;AAACX,MAAAA;AAAD,KAAD,KAAmB;AAAE;AACjC,YAAM;AAACE,QAAAA,OAAD;AAAUC,QAAAA;AAAV,UAAqBH,WAA3B,CAD+B,CACQ;;AACvCI,MAAAA,UAAU,CAACC,OAAX,CAAmBO,SAAnB;AACAR,MAAAA,UAAU,CAACC,OAAX,CAAmBQ,MAAnB,CAA0BX,OAA1B,EAAmCC,OAAnC;AACAM,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KApD2C;AAAA;;AAE5CK,EAAAA,MAAM,GAAG;AAAE;AACT;AAAA;;AAEI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEQ;AAAK,QAAA,KAAK,EAAC,QAAX;AAAA,+BACI;AACA,UAAA,WAAW,EAAE,KAAKH,WADlB;AAEA,UAAA,SAAS,EAAE,KAAKH,UAFhB;AAGA,UAAA,WAAW,EAAE,KAAKT,IAHlB;AAIA,UAAA,GAAG,EAAE,KAAKgB;AAJV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAnBJ;AA4BD;;AA/B2C;AAwD9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeC,MAAf,C,CAAsB","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport './styles.css'\r\n\r\n// Componente para dibujar\r\n\r\nclass CanvasComponent extends React.Component {\r\n\r\n  render() { // Renderiza el modulo\r\n    return (\r\n\r\n        /*useEffect(() => {\r\n            const canvas = canvasRef.current\r\n            // Redefiniendo densidad de pixeles\r\n            canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n            canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n            canvas.style.width = `${window.innerWidth}px`\r\n            canvas.style.height = `${window.innerHeight}px`\r\n        \r\n            // Contexto donde se dibuja\r\n            const context = canvas.getContext('2d')\r\n            context.scale(2, 2) // Para soportar la densidad de pixeles\r\n            context.lineCap = 'round' // Para el final del trazo\r\n            context.strokeStyle = 'black' // Estilo\r\n            context.lineWitdh = 5 // Ancho de la linea\r\n            contextRef.current = context\r\n          }, [])*/\r\n\r\n        <div class=\"layout\">\r\n            <canvas\r\n            onMouseDown={this.starDrawing}\r\n            onMouseUp={this.endDrawing}\r\n            onMouseMove={this.draw}\r\n            ref={this.canvasRef}\r\n            />\r\n        </div>\r\n    )\r\n  }\r\n\r\n\r\n  draw = ({nativeEvent}) => { // Dibuja\r\n    if(isDrawing){\r\n        const {offsetX, offsetY} = nativeEvent // Obtiene la posición\r\n        contextRef.current.lineTo(offsetX, offsetY) // Dibuja\r\n        contextRef.current.stroke()\r\n    }\r\n  }\r\n\r\n  endDrawing = () => { // Termina de dibujar\r\n    setIsDrawing(false)\r\n    contextRef.current.closePath()\r\n  }\r\n\r\n  starDrawing = ({nativeEvent}) => { // Inicia el dibujo\r\n    const {offsetX, offsetY} = nativeEvent // Obtiene la posición\r\n    contextRef.current.beginPath()\r\n    contextRef.current.moveTo(offsetX, offsetY)\r\n    setIsDrawing(true)\r\n  }\r\n\r\n}\r\n\r\n/*\r\nfunction Canvas() {\r\n  // Referencia al canvas actual\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  // Para determinar si se encuentra dibujando\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    // Redefiniendo densidad de pixeles\r\n    canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n    canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n    canvas.style.width = `${window.innerWidth}px`\r\n    canvas.style.height = `${window.innerHeight}px`\r\n\r\n    // Contexto donde se dibuja\r\n    const context = canvas.getContext('2d')\r\n    context.scale(2, 2) // Para soportar la densidad de pixeles\r\n    context.lineCap = 'round' // Para el final del trazo\r\n    context.strokeStyle = 'black' // Estilo\r\n    context.lineWitdh = 5 // Ancho de la linea\r\n    contextRef.current = context\r\n  }, [])\r\n\r\n  const draw = ({nativeEvent}) => { // Dibuja\r\n    if(isDrawing){\r\n        const {offsetX, offsetY} = nativeEvent // Obtiene la posición\r\n        contextRef.current.lineTo(offsetX, offsetY) // Dibuja\r\n        contextRef.current.stroke()\r\n    }\r\n  }\r\n\r\n  const endDrawing = () => { // Termina de dibujar\r\n    setIsDrawing(false)\r\n    contextRef.current.closePath()\r\n  }\r\n\r\n  const starDrawing = ({nativeEvent}) => { // Inicia el dibujo\r\n    const {offsetX, offsetY} = nativeEvent // Obtiene la posición\r\n    contextRef.current.beginPath()\r\n    contextRef.current.moveTo(offsetX, offsetY)\r\n    setIsDrawing(true)\r\n  }\r\n\r\n  return (\r\n    <div class=\"layout\">\r\n      <canvas\r\n        onMouseDown={starDrawing}\r\n        onMouseUp={endDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n*/\r\n\r\nexport default Canvas // Exporta el componente con estilos\r\n"]},"metadata":{},"sourceType":"module"}