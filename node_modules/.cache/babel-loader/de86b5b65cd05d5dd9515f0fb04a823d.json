{"ast":null,"code":"import React, { useEffect, useState, useRef } from 'react';\nimport './styles.css'; // Componente para dibujar\n\n/*\r\nfunction Canvas() {\r\n  // Referencia al canvas actual\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  // Para determinar si se encuentra dibujando\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    // Redefiniendo densidad de pixeles\r\n    canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n    canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n    canvas.style.width = `${window.innerWidth}px`\r\n    canvas.style.height = `${window.innerHeight}px`\r\n\r\n    // Contexto donde se dibuja\r\n    const context = canvas.getContext('2d')\r\n    context.scale(2, 2) // Para soportar la densidad de pixeles\r\n    context.lineCap = 'round' // Para el final del trazo\r\n    context.strokeStyle = 'black' // Estilo\r\n    context.lineWitdh = 5 // Ancho de la linea\r\n    contextRef.current = context\r\n  }, [])\r\n\r\n  const draw = ({nativeEvent}) => { // Dibuja\r\n    if(isDrawing){\r\n        const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n        contextRef.current.lineTo(offsetX, offsetY) // Dibuja\r\n        contextRef.current.stroke()\r\n    }\r\n  }\r\n\r\n  const endDrawing = () => { // Termina de dibujar\r\n    setIsDrawing(false)\r\n    contextRef.current.closePath()\r\n  }\r\n\r\n  const starDrawing = ({nativeEvent}) => { // Inicia el dibujo\r\n    const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n    contextRef.current.beginPath()\r\n    contextRef.current.moveTo(offsetX, offsetY)\r\n    setIsDrawing(true)\r\n  }\r\n\r\n  return (\r\n    <div class=\"layout\">\r\n      <canvas\r\n        onMouseDown={starDrawing}\r\n        onMouseUp={endDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n*/\n\nexport default Canvas; // Exporta el componente con estilos","map":{"version":3,"sources":["C:/Users/darva/Documents/David/UD/Septimo semestre/FIS/PixeNoteApp/pixelnote/src/canvas/canvas.js"],"names":["React","useEffect","useState","useRef","Canvas"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,cAAP,C,CAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,MAAf,C,CAAsB","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport './styles.css'\r\n\r\n// Componente para dibujar\r\n\r\n\r\n\r\n/*\r\nfunction Canvas() {\r\n  // Referencia al canvas actual\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  // Para determinar si se encuentra dibujando\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    // Redefiniendo densidad de pixeles\r\n    canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n    canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n    canvas.style.width = `${window.innerWidth}px`\r\n    canvas.style.height = `${window.innerHeight}px`\r\n\r\n    // Contexto donde se dibuja\r\n    const context = canvas.getContext('2d')\r\n    context.scale(2, 2) // Para soportar la densidad de pixeles\r\n    context.lineCap = 'round' // Para el final del trazo\r\n    context.strokeStyle = 'black' // Estilo\r\n    context.lineWitdh = 5 // Ancho de la linea\r\n    contextRef.current = context\r\n  }, [])\r\n\r\n  const draw = ({nativeEvent}) => { // Dibuja\r\n    if(isDrawing){\r\n        const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n        contextRef.current.lineTo(offsetX, offsetY) // Dibuja\r\n        contextRef.current.stroke()\r\n    }\r\n  }\r\n\r\n  const endDrawing = () => { // Termina de dibujar\r\n    setIsDrawing(false)\r\n    contextRef.current.closePath()\r\n  }\r\n\r\n  const starDrawing = ({nativeEvent}) => { // Inicia el dibujo\r\n    const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n    contextRef.current.beginPath()\r\n    contextRef.current.moveTo(offsetX, offsetY)\r\n    setIsDrawing(true)\r\n  }\r\n\r\n  return (\r\n    <div class=\"layout\">\r\n      <canvas\r\n        onMouseDown={starDrawing}\r\n        onMouseUp={endDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n*/\r\n\r\nexport default Canvas // Exporta el componente con estilos\r\n"]},"metadata":{},"sourceType":"module"}