{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darva\\\\Documents\\\\David\\\\UD\\\\Septimo semestre\\\\FIS\\\\PixeNoteApp\\\\pixelnote\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport SidebarComponent from './sidebar/sidebar';\nimport EditorComponent from './editor/editor'; // Clase principal de React\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.newNote = async title => {\n      const note = {\n        title: title,\n        body: \"\"\n      };\n      const newFromDB = await firebase.firestore().collection('notes').add({\n        title: note.title,\n        body: note.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp() // Fecha de creación\n\n      });\n      const newID = newFromDB.id;\n      await this.setState({\n        notes: [...this.state.notes, note]\n      }); // Actualiza el estado con las notas que ya existen más la nueva nota\n\n      const newNoteIndex = this.state.note.indexOf(this.state.notes.filter(_note => _note.id === newID)[0]); // Obtiene el nuevo index\n    };\n\n    this.noteUpdate = (id, note) => {\n      firebase.firestore().collection('notes').doc(id).update({\n        title: note.title,\n        body: note.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp() // Última vez editado\n\n      });\n    };\n\n    this.selectNote = (n, i) => {\n      this.setState({\n        selectedNoteIndex: i,\n        selectedNote: n\n      });\n    };\n\n    this.componentDidMount = () => {\n      firebase.firestore().collection('notes') // Obtiene lo que encuentre en notes\n      .onSnapshot(serverUpdate => {\n        // Cada vez que se actualice la base de datos\n        const notes = serverUpdate.docs.map(_doc => {\n          // Mapeado\n          const data = _doc.data();\n\n          data['id'] = _doc.id;\n          return data;\n        }); //console.log(notes)\n\n        this.setState({\n          notes: notes\n        });\n      });\n    };\n\n    this.state = {\n      // Variables de estado\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null\n    };\n  }\n\n  render() {\n    // Página principal de la aplicación\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(SidebarComponent, {\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        deleteNote: this.deleteNote,\n        selectNote: this.selectNote,\n        newNote: this.newNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), this.state.selectedNote ?\n      /*#__PURE__*/\n      // Si ha seleccionado una nota\n      _jsxDEV(EditorComponent, {\n        selectedNote: this.state.selectedNote,\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        noteUpdate: this.noteUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this) : // Si no ha seleccionada nada no despliega el editor\n      null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  } // Nueva nota\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/darva/Documents/David/UD/Septimo semestre/FIS/PixeNoteApp/pixelnote/src/App.js"],"names":["React","firebase","SidebarComponent","EditorComponent","App","Component","constructor","newNote","title","note","body","newFromDB","firestore","collection","add","timestamp","FieldValue","serverTimestamp","newID","id","setState","notes","state","newNoteIndex","indexOf","filter","_note","noteUpdate","doc","update","selectNote","n","i","selectedNoteIndex","selectedNote","componentDidMount","onSnapshot","serverUpdate","docs","map","_doc","data","render","deleteNote"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport firebase from 'firebase';\nimport 'firebase/firestore';\n\nimport SidebarComponent from './sidebar/sidebar'\nimport EditorComponent from './editor/editor'\n\n// Clase principal de React\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      // Variables de estado\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null,\n    }\n  }\n\n  render() {\n    // Página principal de la aplicación\n    return(\n      <div className='app-container'>\n        <SidebarComponent\n         selectedNoteIndex={this.state.selectedNoteIndex}\n         notes={this.state.notes}\n         deleteNote={this.deleteNote}\n         selectNote={this.selectNote}\n         newNote={this.newNote}\n         ></SidebarComponent>\n        {\n          this.state.selectedNote ? // Si ha seleccionado una nota\n            <EditorComponent\n            selectedNote={this.state.selectedNote}\n            selectedNoteIndex={this.state.selectedNoteIndex}\n            notes={this.state.notes}\n            noteUpdate={this.noteUpdate}\n          ></EditorComponent>\n          : // Si no ha seleccionada nada no despliega el editor\n          null\n        }\n      </div>\n    )\n  }\n\n  // Nueva nota\n  newNote = async (title) => {\n    const note = {\n      title: title,\n      body: \"\",\n    }\n    const newFromDB = await firebase\n    .firestore()\n    .collection('notes')\n    .add({\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp() // Fecha de creación\n    })\n    const newID = newFromDB.id;\n    await this.setState({ notes: [...this.state.notes, note]}) // Actualiza el estado con las notas que ya existen más la nueva nota\n    const newNoteIndex = this.state.note.indexOf(this.state.notes.filter(_note => _note.id === newID)[0]) // Obtiene el nuevo index\n  }\n\n  // Actualiza en la base de datos\n  noteUpdate = (id, note) => {\n    firebase\n    .firestore()\n    .collection('notes')\n    .doc(id)\n    .update({\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp() // Última vez editado\n    })\n  }\n\n  // Selecciona la nota\n  selectNote = (n, i) =>{\n    this.setState({\n      selectedNoteIndex: i,\n      selectedNote: n\n    })\n  }\n\n  // Cuando el cargue satisfactoriamente se llama automaticamente\n  componentDidMount = () => {\n    firebase\n      .firestore()\n      .collection('notes') // Obtiene lo que encuentre en notes\n      .onSnapshot(serverUpdate => { // Cada vez que se actualice la base de datos\n        const notes = serverUpdate.docs.map(_doc => { // Mapeado\n          const data = _doc.data()\n          data['id'] = _doc.id\n          return data\n        })\n        //console.log(notes)\n        this.setState({ notes: notes })\n      })\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}