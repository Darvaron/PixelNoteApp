{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\darva\\\\Documents\\\\David\\\\UD\\\\Septimo semestre\\\\FIS\\\\PixeNoteApp\\\\pixelnote\\\\src\\\\canvas\\\\canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useCanvas } from './canvasContext';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Canvas() {\n  _s();\n\n  const {\n    canvasRef,\n    prepareCanvas,\n    startDrawing,\n    finishDrawing,\n    draw\n  } = useCanvas();\n  useEffect(() => {\n    prepareCanvas();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"layout\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n} //import React, { useEffect, useState, useRef } from 'react'\n//import './styles.css'\n// Componente para dibujar\n\n/*\r\nfunction Canvas() {\r\n  // Referencia al canvas actual\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  // Para determinar si se encuentra dibujando\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    // Redefiniendo densidad de pixeles\r\n    canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n    canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n    canvas.style.width = `${window.innerWidth}px`\r\n    canvas.style.height = `${window.innerHeight}px`\r\n\r\n    // Contexto donde se dibuja\r\n    const context = canvas.getContext('2d')\r\n    context.scale(2, 2) // Para soportar la densidad de pixeles\r\n    context.lineCap = 'round' // Para el final del trazo\r\n    context.strokeStyle = 'black' // Estilo\r\n    context.lineWitdh = 5 // Ancho de la linea\r\n    contextRef.current = context\r\n  }, [])\r\n\r\n  const draw = ({nativeEvent}) => { // Dibuja\r\n    if(isDrawing){\r\n        const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n        contextRef.current.lineTo(offsetX, offsetY) // Dibuja\r\n        contextRef.current.stroke()\r\n    }\r\n  }\r\n\r\n  const endDrawing = () => { // Termina de dibujar\r\n    setIsDrawing(false)\r\n    contextRef.current.closePath()\r\n  }\r\n\r\n  const starDrawing = ({nativeEvent}) => { // Inicia el dibujo\r\n    const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n    contextRef.current.beginPath()\r\n    contextRef.current.moveTo(offsetX, offsetY)\r\n    setIsDrawing(true)\r\n  }\r\n\r\n  return (\r\n    <div class=\"layout\">\r\n      <canvas\r\n        onMouseDown={starDrawing}\r\n        onMouseUp={endDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n*/\n\n_s(Canvas, \"cKjvKVnEpSGzeHtYBzFhE4JYyIk=\", false, function () {\n  return [useCanvas];\n});\n\n_c = Canvas;\nexport default Canvas; // Exporta el componente con estilos\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["C:/Users/darva/Documents/David/UD/Septimo semestre/FIS/PixeNoteApp/pixelnote/src/canvas/canvas.js"],"names":["React","useEffect","useCanvas","Canvas","canvasRef","prepareCanvas","startDrawing","finishDrawing","draw"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAO,cAAP;;AAEA,OAAO,SAASC,MAAT,GAAkB;AAAA;;AACvB,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA;AALI,MAMFN,SAAS,EANb;AAQAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,KAAK,EAAC,QAAX;AAAA,2BACE;AACE,MAAA,WAAW,EAAEC,YADf;AAEE,MAAA,SAAS,EAAEC,aAFb;AAGE,MAAA,WAAW,EAAEC,IAHf;AAIE,MAAA,GAAG,EAAEJ;AAJP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,C,CAED;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAtFgBD,M;UAOVD,S;;;KAPUC,M;AAwFhB,eAAeA,MAAf,C,CAAsB","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useCanvas } from './canvasContext'\r\nimport './styles.css'\r\n\r\nexport function Canvas() {\r\n  const {\r\n    canvasRef,\r\n    prepareCanvas,\r\n    startDrawing,\r\n    finishDrawing,\r\n    draw,\r\n  } = useCanvas()\r\n\r\n  useEffect(() => {\r\n    prepareCanvas()\r\n  }, [])\r\n\r\n  return (\r\n    <div class=\"layout\">\r\n      <canvas\r\n        onMouseDown={startDrawing}\r\n        onMouseUp={finishDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n//import React, { useEffect, useState, useRef } from 'react'\r\n//import './styles.css'\r\n\r\n// Componente para dibujar\r\n\r\n/*\r\nfunction Canvas() {\r\n  // Referencia al canvas actual\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  // Para determinar si se encuentra dibujando\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    // Redefiniendo densidad de pixeles\r\n    canvas.width = window.innerWidth * 2 // Para pantallas de alta densidad\r\n    canvas.height = window.innerHeight * 2 // Para pantallas de alta densidad\r\n    canvas.style.width = `${window.innerWidth}px`\r\n    canvas.style.height = `${window.innerHeight}px`\r\n\r\n    // Contexto donde se dibuja\r\n    const context = canvas.getContext('2d')\r\n    context.scale(2, 2) // Para soportar la densidad de pixeles\r\n    context.lineCap = 'round' // Para el final del trazo\r\n    context.strokeStyle = 'black' // Estilo\r\n    context.lineWitdh = 5 // Ancho de la linea\r\n    contextRef.current = context\r\n  }, [])\r\n\r\n  const draw = ({nativeEvent}) => { // Dibuja\r\n    if(isDrawing){\r\n        const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n        contextRef.current.lineTo(offsetX, offsetY) // Dibuja\r\n        contextRef.current.stroke()\r\n    }\r\n  }\r\n\r\n  const endDrawing = () => { // Termina de dibujar\r\n    setIsDrawing(false)\r\n    contextRef.current.closePath()\r\n  }\r\n\r\n  const starDrawing = ({nativeEvent}) => { // Inicia el dibujo\r\n    const {offsetX, offsetY} = nativeEvent // Obtiene la posici贸n\r\n    contextRef.current.beginPath()\r\n    contextRef.current.moveTo(offsetX, offsetY)\r\n    setIsDrawing(true)\r\n  }\r\n\r\n  return (\r\n    <div class=\"layout\">\r\n      <canvas\r\n        onMouseDown={starDrawing}\r\n        onMouseUp={endDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n*/\r\n\r\nexport default Canvas // Exporta el componente con estilos\r\n"]},"metadata":{},"sourceType":"module"}